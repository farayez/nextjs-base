networks:
  backend:
    driver: bridge

services:
  web:
    build:
      context: ./web
      target: dev
    ports:
      - 3000:3000
    volumes:
      - ./web/package.json:/app/package.json
      - ./web/package-lock.json:/app/package-lock.json
      - ./web/.env:/app/.env
      - ./web/app:/app/app
      - ./web/components:/app/components
      - ./web/utils:/app/utils
      - ./web/tests:/app/tests
    networks:
      - backend
  api:
    build:
      context: ./api
      target: dev
    # environment:
    #   POSTGRES_HOST: db
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    #   POSTGRES_DB: example
    ports:
      - 3001:3001
    volumes:
      - ./api/package.json:/app/package.json
      - ./api/package-lock.json:/app/package-lock.json
      - ./api/.env:/app/.env
      - ./api/.env.testing:/app/.env.testing
      - ./api/src:/app/src
      - ./api/config:/app/config
      - ./api/.babelrc:/app/.babelrc
      - ./api/.sequelizerc:/app/.sequelizerc
      - ./api/jest.config.js:/app/jest.config.js
    networks:
      - backend
    # depends_on:
    #   db:
    #     condition: service_healthy
    # secrets:
    #   - db-password
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
  test-web-cypress:
    build:
      context: ./web
      target: test-suite
    command: "test:integration"
    entrypoint: ["npm", "run"]
    ports:
      - 3000:3000
    volumes:
      - ./web/cypress/screenshots:/app/cypress/screenshots
      - ./web/cypress/videos:/app/cypress/videos
